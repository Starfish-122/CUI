@use 'sass:math';
@use 'sass:list';
@use 'sass:map';
@use 'functions' as func;
@use 'variables' as v;

// ============================================================
// Media query
// * max : @include mm(m) {color: blue;}
// * min : @include mm(700) {color: blue;}
// breakpoint : s, m, l, xl, xxl
// ============================================================
@mixin mm($breakpoint) {
    $raw-query: map.get(vars.$breakpoints, $breakpoint);

    @if $raw-query {
        $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

        @media #{$query} {
            @content;
        }
    } @else {
        @media (min-width:#{$breakpoint + 0px}) {
            @content;
        }
        // @error '`#{$breakpoint}` 값을 찾을 수 없습니다.';
    }
}

// ============================================================
// media query
// * max : @include cc(button, m) {color: blue;}
// * min : @include cc(button, 200) {color: blue;}
// breakpoint : s, m, l, xl, xxl
// ============================================================
@mixin cc($name, $breakpoint) {
    $raw-query: map.get(vars.$breakpoints, $breakpoint);

    @if $raw-query {
        $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

        @media #{$query} {
            @content;
        }
    } @else {
        @media (min-width:#{$breakpoint + 0px}) {
            @content;
        }
        // @error '`#{$breakpoint}` 값을 찾을 수 없습니다.';
    }
}

// ============================================================
// Clamp
// *  @include clamp(width, 1rem, 150px, 768);
// *  @include clamp(width, 1em, 31.25(em값) * 16px(부모값), $wide);
// ============================================================

// ============================================================
//  Font
// * @include fonts(vars.$medium, 80, $line: 90);
// ============================================================

@mixin fonts($view, $size: $base-font-size, $weight: null, $line: 1, $type: null) {
    $font-size: '';
    @if ($type == 'vw') {
        $font-size: func.gap-vw($size, $view);
    } @else if($type == null) {
        $font-size: func.gap-cqi($size, $view);
    }

    font: {
        // size: $font-size;
        size: clamp(9px, $font-size, $size * 1px);
        weight: $weight;
    }

    line-height: if($line == 1, $line, calc($line / $size));

    @content;
}

// ============================================================
//  Font Pc/Mobile
// * @include font-set(118, 80, $line: 90);
// ============================================================
@mixin font-set($size: $base-font-size, $mo-size: $size, $weight: null, $line: 1) {
    --wide: 1920;
    $wide: --wide;

    @include fonts($wide, $size, $weight, $line) {
        --medium: 750;

        @include mm(m) {
            $font-size: func.gap-cqi($mo-size, --medium);

            font: {
                // size: $font-size;
                size: clamp(11px, $font-size, $mo-size * 1px);
            }
        }
    }
}

// ============================================================
// Flex
// * @include flex(end, center){...};
// * @include flex-column(flex-start, center){...};
// ============================================================

@mixin flex($justify: center, $align: center) {
    display: flex;
    justify-content: $justify;
    align-items: $align;
    // ! flex: 1 1 0;
    // flex: $flex-grow, $flex-shrink, $flex-basis
    // ! flex-flow: row wrap;
    // flex-flow: $flex-direction $flex-wrap
    @content;
}
@mixin flex-column($justify: center, $align: center) {
    @include flex($justify, $align);
    flex-direction: column;
    @content;
}

// ============================================================
// Grid
// * @include grid(repeat(3, 1fr), center, center){...};
// * @include grid-rows(repeat(3, 1fr), minmax(100px, auto), center, start){...};
// ============================================================
@mixin grid($columns, $justify: null, $align: null) {
    display: grid;
    grid-template-columns: $columns;
    @if ($justify == $align) {
        place-items: $align;
    } @else {
        place-items: $align $justify;
    }
    @content;
}
@mixin grid-rows($columns, $rows, $justify: null, $align: null) {
    @include grid($columns, $justify, $align) {
        grid-auto-rows: $rows;
    }
    // place-content: $align-content $justify-content;
    // place-self: $align-content $justify-content;
    @content;
}

// ============================================================
// Position
// * @include pos-null
// * @include pos-abs($t:10px, $r: 10px, $b: 10px, $z: 1){...};
// * @include pos-x($t: 0, $z: 1){...};
// * @include pos-y($l: 10px, $z: 2){...};
// * @include pos-xy($t: 10px, $r: 10px, $b: 10px, $z: 1){...};
// * @include pos-z($z: 1)
// ============================================================
@mixin pos-null {
    position: static;
    transform: translate(0);
}
@mixin pos-abs($t: 0, $r: null, $b: null, $l: null, $z: null) {
    position: absolute;
    top: $t;
    right: $r;
    bottom: $b;
    left: $l;
    z-index: $z;
    @content;
}
@mixin pos-x($t: null, $r: null, $b: null, $l: 50%, $z: null) {
    @include pos-abs($t, $r, $b, $l, $z) {
        $y: calc($l * -1);
        transform: translateX($y);
    }
}
@mixin pos-y($t: 50%, $r: null, $b: null, $l: null, $z: null) {
    @include pos-abs($t, $r, $b, $l, $z) {
        $y: calc($t * -1);
        transform: translateY($y);
    }
}
@mixin pos-xy($t: 50%, $l: 50%, $x: -50%, $y: -50%, $z: null) {
    @include pos-abs($t, $l: $l, $z: $z) {
        transform: translate($x, $y);
    }
}
@mixin pos-z($z: 0) {
    position: relative;
    z-index: $z;
}

// ============================================================
// Background image
// * @include img($w:100px, $h:100px, $url:$ico-kakao, $x: 0, $y: 0, $ob: 0, $size: cover) { ... };
// * @include img($url: img("name.png"));
// ============================================================
@mixin img($url, $w: null, $h: null, $x: null, $y: null, $ob: null, $size: null) {
    width: $w;
    height: $h;
    background-image: $url;
    background-repeat: no-repeat;
    background-position-x: $x;
    background-position-y: $y;
    object-fit: $ob;
    background-size: $size;
    @content;
}

/*  
hover, active, focus
^ 요소 전체 이벤트,
* @include event(true) {...}
^ 요소의 초점 이벤트,
* @include event {...} 
*/
@mixin event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus,
        &:focus-within {
            @content;
        }
    } @else {
        &:focus-visible {
            @content;
        }
        &:focus:not(:focus-visible) {
            outline: 0;
        }

        &:hover,
        &:active,
        &:focus,
        &:focus-within {
            @content;
        }
    }
}
